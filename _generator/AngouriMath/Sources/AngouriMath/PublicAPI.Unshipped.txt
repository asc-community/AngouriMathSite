#nullable enable
AngouriMath.Core.ApproachFrom
AngouriMath.Core.ApproachFrom.BothSides = 0 -> AngouriMath.Core.ApproachFrom
AngouriMath.Core.ApproachFrom.Left = 1 -> AngouriMath.Core.ApproachFrom
AngouriMath.Core.ApproachFrom.Right = 2 -> AngouriMath.Core.ApproachFrom
AngouriMath.Core.EquationSystem
AngouriMath.Core.EquationSystem.EquationSystem(System.Collections.Generic.IEnumerable<AngouriMath.Entity!>! equations) -> void
AngouriMath.Core.EquationSystem.EquationSystem(params AngouriMath.Entity![]! equations) -> void
AngouriMath.Core.EquationSystem.Latexise() -> string!
AngouriMath.Core.EquationSystem.Solve(System.ReadOnlySpan<AngouriMath.Entity.Variable!> vars) -> AngouriMath.Entity.Tensor?
AngouriMath.Core.EquationSystem.Solve(params AngouriMath.Entity.Variable![]! vars) -> AngouriMath.Entity.Tensor?
AngouriMath.Core.Exceptions.AngouriBugException
AngouriMath.Core.Exceptions.AngouriBugException.AngouriBugException(string! msg) -> void
AngouriMath.Core.Exceptions.FunctionArgumentCountException
AngouriMath.Core.Exceptions.MathSException
AngouriMath.Core.Exceptions.MathSException.MathSException(string! message) -> void
AngouriMath.Core.Exceptions.ParseException
AngouriMath.Core.Exceptions.ParseException.ParseException(string! msg) -> void
AngouriMath.Core.Exceptions.TreeException
AngouriMath.Core.Exceptions.TreeException.TreeException(string! message) -> void
AngouriMath.Core.Exceptions.UncompilableNodeException
AngouriMath.Core.Exceptions.UncompilableNodeException.UncompilableNodeException(string! message) -> void
AngouriMath.Core.FastExpression
AngouriMath.Core.FastExpression.Call(params System.Numerics.Complex[]! values) -> System.Numerics.Complex
AngouriMath.Core.FastExpression.Substitute(params System.Numerics.Complex[]! values) -> System.Numerics.Complex
AngouriMath.Core.FiniteSet
AngouriMath.Core.FiniteSet.Count.get -> int
AngouriMath.Core.FiniteSet.GetEnumerator() -> System.Collections.Generic.IEnumerator<AngouriMath.Entity!>!
AngouriMath.Core.FiniteSet.ToList() -> System.Collections.Generic.List<AngouriMath.Entity!>!
AngouriMath.Core.FiniteSet.this[int index].get -> AngouriMath.Entity!
AngouriMath.Core.ILatexiseable
AngouriMath.Core.ILatexiseable.Latexise() -> string!
AngouriMath.Core.Interval
AngouriMath.Core.Interval.SetLeftClosed(bool Re, bool Im) -> AngouriMath.Core.Interval!
AngouriMath.Core.Interval.SetLeftClosed(bool isClosed) -> AngouriMath.Core.Interval!
AngouriMath.Core.Interval.SetRightClosed(bool Re, bool Im) -> AngouriMath.Core.Interval!
AngouriMath.Core.Interval.SetRightClosed(bool isClosed) -> AngouriMath.Core.Interval!
AngouriMath.Core.OneElementPiece
AngouriMath.Core.Priority
AngouriMath.Core.Priority.Div = 40 -> AngouriMath.Core.Priority
AngouriMath.Core.Priority.Factorial = 70 -> AngouriMath.Core.Priority
AngouriMath.Core.Priority.Func = 80 -> AngouriMath.Core.Priority
AngouriMath.Core.Priority.Minus = 20 -> AngouriMath.Core.Priority
AngouriMath.Core.Priority.Mul = 40 -> AngouriMath.Core.Priority
AngouriMath.Core.Priority.Number = 100 -> AngouriMath.Core.Priority
AngouriMath.Core.Priority.Pow = 60 -> AngouriMath.Core.Priority
AngouriMath.Core.Priority.Sum = 20 -> AngouriMath.Core.Priority
AngouriMath.Core.Priority.Variable = 100 -> AngouriMath.Core.Priority
AngouriMath.Core.Set
AngouriMath.Core.Set.Add(AngouriMath.Core.SetPiece! piece) -> void
AngouriMath.Core.Set.AddElements(params AngouriMath.Entity![]! elements) -> void
AngouriMath.Core.Set.AddInterval(AngouriMath.Core.Interval! interval) -> void
AngouriMath.Core.Set.AsFiniteSet() -> System.Collections.Generic.IEnumerable<AngouriMath.Entity!>?
AngouriMath.Core.Set.Clear() -> void
AngouriMath.Core.Set.CopyTo(AngouriMath.Core.SetPiece![]! array, int arrayIndex) -> void
AngouriMath.Core.Set.Count.get -> int
AngouriMath.Core.Set.FastAddingMode.get -> bool
AngouriMath.Core.Set.FastAddingMode.set -> void
AngouriMath.Core.Set.FiniteSet() -> AngouriMath.Core.FiniteSet!
AngouriMath.Core.Set.GetEnumerator() -> System.Collections.Generic.IEnumerator<AngouriMath.Core.SetPiece!>!
AngouriMath.Core.Set.IsEmpty() -> bool
AngouriMath.Core.Set.IsReadOnly.get -> bool
AngouriMath.Core.Set.Remove(AngouriMath.Core.SetPiece! item) -> bool
AngouriMath.Core.Set.Set(params AngouriMath.Core.SetPiece![]! elements) -> void
AngouriMath.Core.SetNode
AngouriMath.Core.SetNode.Contains(AngouriMath.Core.Set! set) -> bool
AngouriMath.Core.SetNode.Contains(AngouriMath.Entity! entity) -> bool
AngouriMath.Core.SetPiece
AngouriMath.Core.SetPiece.Contains(AngouriMath.Core.SetPiece! piece) -> bool
AngouriMath.Core.SetPiece.SetPiece() -> void
AngouriMath.Entity
AngouriMath.Entity.Alternate(int level) -> System.Collections.Generic.IEnumerable<AngouriMath.Entity!>!
AngouriMath.Entity.Arccos() -> AngouriMath.Entity!
AngouriMath.Entity.Arccosf
AngouriMath.Entity.Arccosf.Arccosf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.Arccosf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Arccosf.Argument.init -> void
AngouriMath.Entity.Arccotan() -> AngouriMath.Entity!
AngouriMath.Entity.Arccotanf
AngouriMath.Entity.Arccotanf.Arccotanf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.Arccotanf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Arccotanf.Argument.init -> void
AngouriMath.Entity.Arcsin() -> AngouriMath.Entity!
AngouriMath.Entity.Arcsinf
AngouriMath.Entity.Arcsinf.Arcsinf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.Arcsinf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Arcsinf.Argument.init -> void
AngouriMath.Entity.Arctan() -> AngouriMath.Entity!
AngouriMath.Entity.Arctanf
AngouriMath.Entity.Arctanf.Arctanf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.Arctanf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Arctanf.Argument.init -> void
AngouriMath.Entity.Compile(params AngouriMath.Entity.Variable![]! variables) -> AngouriMath.Core.FastExpression!
AngouriMath.Entity.Compile(params string![]! variables) -> AngouriMath.Core.FastExpression!
AngouriMath.Entity.Complexity.get -> int
AngouriMath.Entity.Contains(AngouriMath.Entity! x) -> bool
AngouriMath.Entity.Cos() -> AngouriMath.Entity!
AngouriMath.Entity.Cosf
AngouriMath.Entity.Cosf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Cosf.Argument.init -> void
AngouriMath.Entity.Cosf.Cosf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.Cotan() -> AngouriMath.Entity!
AngouriMath.Entity.Cotanf
AngouriMath.Entity.Cotanf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Cotanf.Argument.init -> void
AngouriMath.Entity.Cotanf.Cotanf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.DefiniteIntegral(AngouriMath.Entity.Variable! x, (PeterO.Numbers.EDecimal! Re, PeterO.Numbers.EDecimal! Im) from, (PeterO.Numbers.EDecimal! Re, PeterO.Numbers.EDecimal! Im) to) -> AngouriMath.Entity.Number.Complex!
AngouriMath.Entity.DefiniteIntegral(AngouriMath.Entity.Variable! x, (PeterO.Numbers.EDecimal! Re, PeterO.Numbers.EDecimal! Im) from, (PeterO.Numbers.EDecimal! Re, PeterO.Numbers.EDecimal! Im) to, int stepCount) -> AngouriMath.Entity.Number.Complex!
AngouriMath.Entity.DefiniteIntegral(AngouriMath.Entity.Variable! x, PeterO.Numbers.EDecimal! from, PeterO.Numbers.EDecimal! to) -> AngouriMath.Entity.Number.Complex!
AngouriMath.Entity.Derivativef
AngouriMath.Entity.Derivativef.Derivativef(AngouriMath.Entity! Expression, AngouriMath.Entity! Var, AngouriMath.Entity! Iterations) -> void
AngouriMath.Entity.Derivativef.Expression.get -> AngouriMath.Entity!
AngouriMath.Entity.Derivativef.Expression.init -> void
AngouriMath.Entity.Derivativef.Iterations.get -> AngouriMath.Entity!
AngouriMath.Entity.Derivativef.Iterations.init -> void
AngouriMath.Entity.Derivativef.Var.get -> AngouriMath.Entity!
AngouriMath.Entity.Derivativef.Var.init -> void
AngouriMath.Entity.Derive(AngouriMath.Entity.Variable! x, PeterO.Numbers.EInteger! power) -> AngouriMath.Entity!
AngouriMath.Entity.DirectChildren.get -> System.Collections.Generic.IReadOnlyList<AngouriMath.Entity!>!
AngouriMath.Entity.Divf
AngouriMath.Entity.Divf.Divf(AngouriMath.Entity! Dividend, AngouriMath.Entity! Divisor) -> void
AngouriMath.Entity.Divf.Dividend.get -> AngouriMath.Entity!
AngouriMath.Entity.Divf.Dividend.init -> void
AngouriMath.Entity.Divf.Divisor.get -> AngouriMath.Entity!
AngouriMath.Entity.Divf.Divisor.init -> void
AngouriMath.Entity.Eval() -> AngouriMath.Entity.Number.Complex!
AngouriMath.Entity.EvalTensor() -> AngouriMath.Entity.Tensor!
AngouriMath.Entity.Evaled.get -> AngouriMath.Entity!
AngouriMath.Entity.Evaluable.get -> bool
AngouriMath.Entity.Expand(int level = 2) -> AngouriMath.Entity!
AngouriMath.Entity.Factorial() -> AngouriMath.Entity!
AngouriMath.Entity.Factorialf
AngouriMath.Entity.Factorialf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Factorialf.Argument.init -> void
AngouriMath.Entity.Factorialf.Factorialf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.Factorize(int level = 2) -> AngouriMath.Entity!
AngouriMath.Entity.Function
AngouriMath.Entity.Integralf
AngouriMath.Entity.Integralf.Expression.get -> AngouriMath.Entity!
AngouriMath.Entity.Integralf.Expression.init -> void
AngouriMath.Entity.Integralf.Integralf(AngouriMath.Entity! Expression, AngouriMath.Entity! Var, AngouriMath.Entity! Iterations) -> void
AngouriMath.Entity.Integralf.Iterations.get -> AngouriMath.Entity!
AngouriMath.Entity.Integralf.Iterations.init -> void
AngouriMath.Entity.Integralf.Var.get -> AngouriMath.Entity!
AngouriMath.Entity.Integralf.Var.init -> void
AngouriMath.Entity.IsFinite.get -> bool
AngouriMath.Entity.Latexise(bool parenthesesRequired) -> string!
AngouriMath.Entity.Limitf
AngouriMath.Entity.Limitf.Expression.init -> void
AngouriMath.Entity.Limitf.Expression.get -> AngouriMath.Entity!
AngouriMath.Entity.Limitf.Var.init -> void
AngouriMath.Entity.Limitf.Var.get -> AngouriMath.Entity!
AngouriMath.Entity.Limitf.Destination.init -> void
AngouriMath.Entity.Limitf.Destination.get -> AngouriMath.Entity!
AngouriMath.Entity.Limitf.ApproachFrom.init -> void
AngouriMath.Entity.Limitf.ApproachFrom.get -> AngouriMath.Core.ApproachFrom
AngouriMath.Entity.Limitf.Limitf(AngouriMath.Entity! Expression, AngouriMath.Entity! Var, AngouriMath.Entity! Destination, AngouriMath.Core.ApproachFrom ApproachFrom) -> void
AngouriMath.Entity.Log(AngouriMath.Entity! x) -> AngouriMath.Entity!
AngouriMath.Entity.Logf
AngouriMath.Entity.Logf.Antilogarithm.get -> AngouriMath.Entity!
AngouriMath.Entity.Logf.Antilogarithm.init -> void
AngouriMath.Entity.Logf.Base.get -> AngouriMath.Entity!
AngouriMath.Entity.Logf.Base.init -> void
AngouriMath.Entity.Logf.Logf(AngouriMath.Entity! Base, AngouriMath.Entity! Antilogarithm) -> void
AngouriMath.Entity.Minusf
AngouriMath.Entity.Minusf.Minuend.get -> AngouriMath.Entity!
AngouriMath.Entity.Minusf.Minuend.init -> void
AngouriMath.Entity.Minusf.Minusf(AngouriMath.Entity! Subtrahend, AngouriMath.Entity! Minuend) -> void
AngouriMath.Entity.Minusf.Subtrahend.get -> AngouriMath.Entity!
AngouriMath.Entity.Minusf.Subtrahend.init -> void
AngouriMath.Entity.Mulf
AngouriMath.Entity.Mulf.Mulf(AngouriMath.Entity! Multiplier, AngouriMath.Entity! Multiplicand) -> void
AngouriMath.Entity.Mulf.Multiplicand.get -> AngouriMath.Entity!
AngouriMath.Entity.Mulf.Multiplicand.init -> void
AngouriMath.Entity.Mulf.Multiplier.get -> AngouriMath.Entity!
AngouriMath.Entity.Mulf.Multiplier.init -> void
AngouriMath.Entity.Nodes.get -> System.Collections.Generic.IEnumerable<AngouriMath.Entity!>!
AngouriMath.Entity.Number
AngouriMath.Entity.Number.Complex
AngouriMath.Entity.Number.Complex.Conjugate() -> AngouriMath.Entity.Number.Complex!
AngouriMath.Entity.Number.Complex.Deconstruct(out AngouriMath.Entity.Number.Real! realPart, out AngouriMath.Entity.Number.Real! imaginaryPart) -> void
AngouriMath.Entity.Number.Complex.ImaginaryPart.get -> AngouriMath.Entity.Number.Real!
AngouriMath.Entity.Number.Complex.IsNaN.get -> bool
AngouriMath.Entity.Number.Complex.IsZero.get -> bool
AngouriMath.Entity.Number.Complex.Phase() -> AngouriMath.Entity.Number.Real!
AngouriMath.Entity.Number.Complex.ToNumerics() -> System.Numerics.Complex
AngouriMath.Entity.Number.Integer
AngouriMath.Entity.Number.Integer.CompareTo(AngouriMath.Entity.Number.Integer! other) -> int
AngouriMath.Entity.Number.Integer.Deconstruct(out int? value) -> void
AngouriMath.Entity.Number.Integer.EInteger.get -> PeterO.Numbers.EInteger!
AngouriMath.Entity.Number.Rational
AngouriMath.Entity.Number.Rational.CompareTo(AngouriMath.Entity.Number.Rational! other) -> int
AngouriMath.Entity.Number.Rational.Deconstruct(out PeterO.Numbers.ERational! rational) -> void
AngouriMath.Entity.Number.Rational.Deconstruct(out int? numerator, out int? denominator) -> void
AngouriMath.Entity.Number.Rational.ERational.get -> PeterO.Numbers.ERational!
AngouriMath.Entity.Number.Real
AngouriMath.Entity.Number.Real.AsDouble() -> double
AngouriMath.Entity.Number.Real.CompareTo(AngouriMath.Entity.Number.Real! other) -> int
AngouriMath.Entity.Number.Real.Deconstruct(out PeterO.Numbers.EDecimal! decimal) -> void
AngouriMath.Entity.Number.Real.EDecimal.get -> PeterO.Numbers.EDecimal!
AngouriMath.Entity.Number.Real.IsNegative.get -> bool
AngouriMath.Entity.Number.Real.IsPositive.get -> bool
AngouriMath.Entity.Pow(AngouriMath.Entity! n) -> AngouriMath.Entity!
AngouriMath.Entity.Powf
AngouriMath.Entity.Powf.Base.get -> AngouriMath.Entity!
AngouriMath.Entity.Powf.Base.init -> void
AngouriMath.Entity.Powf.Exponent.get -> AngouriMath.Entity!
AngouriMath.Entity.Powf.Exponent.init -> void
AngouriMath.Entity.Powf.Powf(AngouriMath.Entity! Base, AngouriMath.Entity! Exponent) -> void
AngouriMath.Entity.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func1, System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func2) -> AngouriMath.Entity!
AngouriMath.Entity.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func1, System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func2, System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func3) -> AngouriMath.Entity!
AngouriMath.Entity.Signumf
AngouriMath.Entity.Simplify(int level = 2) -> AngouriMath.Entity!
AngouriMath.Entity.Sin() -> AngouriMath.Entity!
AngouriMath.Entity.Sinf
AngouriMath.Entity.Sinf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Sinf.Argument.init -> void
AngouriMath.Entity.Sinf.Sinf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.SolveEquation(AngouriMath.Entity.Variable! x) -> AngouriMath.Core.Set!
AngouriMath.Entity.SolveNt(AngouriMath.Entity.Variable! v) -> System.Collections.Generic.HashSet<AngouriMath.Entity.Number.Complex!>!
AngouriMath.Entity.Stringize(bool parenthesesRequired) -> string!
AngouriMath.Entity.Substitute(AngouriMath.Entity! x, AngouriMath.Entity! value) -> AngouriMath.Entity!
AngouriMath.Entity.Substitute<TFrom, TTo>(System.Collections.Generic.IReadOnlyDictionary<TFrom!, TTo!>! replacements) -> AngouriMath.Entity!
AngouriMath.Entity.Sumf
AngouriMath.Entity.Sumf.Addend.get -> AngouriMath.Entity!
AngouriMath.Entity.Sumf.Addend.init -> void
AngouriMath.Entity.Sumf.Augend.get -> AngouriMath.Entity!
AngouriMath.Entity.Sumf.Augend.init -> void
AngouriMath.Entity.Sumf.Sumf(AngouriMath.Entity! Augend, AngouriMath.Entity! Addend) -> void
AngouriMath.Entity.Tan() -> AngouriMath.Entity!
AngouriMath.Entity.Tanf
AngouriMath.Entity.Tanf.Argument.get -> AngouriMath.Entity!
AngouriMath.Entity.Tanf.Argument.init -> void
AngouriMath.Entity.Tanf.Tanf(AngouriMath.Entity! Argument) -> void
AngouriMath.Entity.Tensor
AngouriMath.Entity.Tensor.Determinant() -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.Dimensions.get -> int
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.Add(AngouriMath.Entity! a, AngouriMath.Entity! b) -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.AreEqual(AngouriMath.Entity! a, AngouriMath.Entity! b) -> bool
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.Copy(AngouriMath.Entity! a) -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.CreateOne() -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.CreateZero() -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.Divide(AngouriMath.Entity! a, AngouriMath.Entity! b) -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.EntityTensorWrapperOperations() -> void
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.Forward(AngouriMath.Entity! a) -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.IsZero(AngouriMath.Entity! a) -> bool
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.Multiply(AngouriMath.Entity! a, AngouriMath.Entity! b) -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.Negate(AngouriMath.Entity! a) -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.Subtract(AngouriMath.Entity! a, AngouriMath.Entity! b) -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.EntityTensorWrapperOperations.ToString(AngouriMath.Entity! a) -> string!
AngouriMath.Entity.Tensor.InnerTensor.get -> GenericTensor.Core.GenTensor<AngouriMath.Entity!, AngouriMath.Entity.Tensor.EntityTensorWrapperOperations>!
AngouriMath.Entity.Tensor.InnerTensor.init -> void
AngouriMath.Entity.Tensor.Inverse() -> AngouriMath.Entity.Tensor!
AngouriMath.Entity.Tensor.IsMatrix.get -> bool
AngouriMath.Entity.Tensor.IsVector.get -> bool
AngouriMath.Entity.Tensor.Shape.get -> GenericTensor.Core.TensorShape
AngouriMath.Entity.Tensor.Tensor(GenericTensor.Core.GenTensor<AngouriMath.Entity!, AngouriMath.Entity.Tensor.EntityTensorWrapperOperations>! InnerTensor) -> void
AngouriMath.Entity.Tensor.Tensor(System.Func<int[]!, AngouriMath.Entity!>! operation, params int[]! dims) -> void
AngouriMath.Entity.Tensor.Transpose() -> void
AngouriMath.Entity.Tensor.Transpose(int a, int b) -> void
AngouriMath.Entity.Tensor.this[int i].get -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.this[int x, int y, int z].get -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.this[int x, int y].get -> AngouriMath.Entity!
AngouriMath.Entity.Tensor.this[params int[]! dims].get -> AngouriMath.Entity!
AngouriMath.Entity.ToSymPy(bool parenthesesRequired) -> string!
AngouriMath.Entity.Variable
AngouriMath.Entity.Variable.IsConstant.get -> bool
AngouriMath.Entity.Variable.Name.get -> string!
AngouriMath.Entity.Vars.get -> System.Collections.Generic.IEnumerable<AngouriMath.Entity.Variable!>!
AngouriMath.Entity.VarsAndConsts.get -> System.Collections.Generic.IReadOnlyCollection<AngouriMath.Entity.Variable!>!
AngouriMath.Extensions.AngouriMathExtensions
AngouriMath.MathS
AngouriMath.MathS.Compute
AngouriMath.MathS.DecimalConst
AngouriMath.MathS.Inequality
AngouriMath.MathS.Inequality.EqualsFlag = 2 -> AngouriMath.MathS.Inequality
AngouriMath.MathS.Inequality.GreaterEquals = AngouriMath.MathS.Inequality.GreaterThan | AngouriMath.MathS.Inequality.EqualsFlag -> AngouriMath.MathS.Inequality
AngouriMath.MathS.Inequality.GreaterThan = 1 -> AngouriMath.MathS.Inequality
AngouriMath.MathS.Inequality.LessEquals = 2 -> AngouriMath.MathS.Inequality
AngouriMath.MathS.Inequality.LessThan = 0 -> AngouriMath.MathS.Inequality
AngouriMath.MathS.Matrices
AngouriMath.MathS.Numbers
AngouriMath.MathS.Sets
AngouriMath.MathS.Settings
AngouriMath.MathS.Settings.NewtonSetting
AngouriMath.MathS.Settings.NewtonSetting.From.get -> (PeterO.Numbers.EDecimal! Re, PeterO.Numbers.EDecimal! Im)
AngouriMath.MathS.Settings.NewtonSetting.From.init -> void
AngouriMath.MathS.Settings.NewtonSetting.Precision.get -> int
AngouriMath.MathS.Settings.NewtonSetting.Precision.init -> void
AngouriMath.MathS.Settings.NewtonSetting.StepCount.get -> (int Re, int Im)
AngouriMath.MathS.Settings.NewtonSetting.StepCount.init -> void
AngouriMath.MathS.Settings.NewtonSetting.To.get -> (PeterO.Numbers.EDecimal! Re, PeterO.Numbers.EDecimal! Im)
AngouriMath.MathS.Settings.NewtonSetting.To.init -> void
AngouriMath.MathS.Settings.Setting<T>
AngouriMath.MathS.Settings.Setting<T>.As(T value, System.Action! action) -> void
AngouriMath.MathS.Settings.Setting<T>.As<TReturnType>(T value, System.Func<TReturnType>! action) -> TReturnType
AngouriMath.MathS.Settings.Setting<T>.Default.get -> T
AngouriMath.MathS.Settings.Setting<T>.Value.get -> T
AngouriMath.SySyn
System.Runtime.CompilerServices.IsExternalInit
abstract AngouriMath.Core.SetNode.Contains(AngouriMath.Core.SetPiece! piece) -> bool
abstract AngouriMath.Core.SetNode.Eval() -> AngouriMath.Core.SetNode!
abstract AngouriMath.Core.SetNode.Latexise() -> string!
abstract AngouriMath.Core.SetPiece.LowerBound() -> (AngouriMath.Entity!, bool, bool)
abstract AngouriMath.Core.SetPiece.UpperBound() -> (AngouriMath.Entity!, bool, bool)
abstract AngouriMath.Entity.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
abstract AngouriMath.Entity.InitDirectChildren() -> AngouriMath.Entity![]!
abstract AngouriMath.Entity.InnerEval() -> AngouriMath.Entity!
abstract AngouriMath.Entity.Latexise() -> string!
abstract AngouriMath.Entity.Number.IsExact.get -> bool
abstract AngouriMath.Entity.Priority.get -> AngouriMath.Core.Priority
abstract AngouriMath.Entity.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Core.FastExpression.ToString() -> string!
override AngouriMath.Core.Interval.Equals(object! obj) -> bool
override AngouriMath.Core.Interval.GetHashCode() -> int
override AngouriMath.Core.Interval.LowerBound() -> (AngouriMath.Entity!, bool, bool)
override AngouriMath.Core.Interval.ToString() -> string!
override AngouriMath.Core.Interval.UpperBound() -> (AngouriMath.Entity!, bool, bool)
override AngouriMath.Core.OneElementPiece.Equals(object! obj) -> bool
override AngouriMath.Core.OneElementPiece.GetHashCode() -> int
override AngouriMath.Core.OneElementPiece.LowerBound() -> (AngouriMath.Entity!, bool, bool)
override AngouriMath.Core.OneElementPiece.ToString() -> string!
override AngouriMath.Core.OneElementPiece.UpperBound() -> (AngouriMath.Entity!, bool, bool)
override AngouriMath.Core.Set.Contains(AngouriMath.Core.SetPiece! piece) -> bool
override AngouriMath.Core.Set.Eval() -> AngouriMath.Core.SetNode!
override AngouriMath.Core.Set.Latexise() -> string!
override AngouriMath.Core.Set.ToString() -> string!
override AngouriMath.Entity.Arccosf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Arccosf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Arccosf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Arccosf.Latexise() -> string!
override AngouriMath.Entity.Arccosf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Arccotanf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Arccotanf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Arccotanf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Arccotanf.Latexise() -> string!
override AngouriMath.Entity.Arccotanf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Arcsinf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Arcsinf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Arcsinf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Arcsinf.Latexise() -> string!
override AngouriMath.Entity.Arcsinf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Arctanf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Arctanf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Arctanf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Arctanf.Latexise() -> string!
override AngouriMath.Entity.Arctanf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Cosf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Cosf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Cosf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Cosf.Latexise() -> string!
override AngouriMath.Entity.Cosf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Cotanf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Cotanf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Cotanf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Cotanf.Latexise() -> string!
override AngouriMath.Entity.Cotanf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Derivativef.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Derivativef.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Derivativef.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Derivativef.Latexise() -> string!
override AngouriMath.Entity.Derivativef.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Divf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Divf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Divf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Divf.Latexise() -> string!
override AngouriMath.Entity.Divf.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Divf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Factorialf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Factorialf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Factorialf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Factorialf.Latexise() -> string!
override AngouriMath.Entity.Factorialf.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Factorialf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Function.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Integralf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Integralf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Integralf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Integralf.Latexise() -> string!
override AngouriMath.Entity.Integralf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Limitf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Limitf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Limitf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Limitf.Latexise() -> string!
override AngouriMath.Entity.Limitf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Logf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Logf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Logf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Logf.Latexise() -> string!
override AngouriMath.Entity.Logf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Minusf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Minusf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Minusf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Minusf.Latexise() -> string!
override AngouriMath.Entity.Minusf.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Minusf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Mulf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Mulf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Mulf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Mulf.Latexise() -> string!
override AngouriMath.Entity.Mulf.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Mulf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Number.Complex.IsExact.get -> bool
override AngouriMath.Entity.Number.Complex.Latexise() -> string!
override AngouriMath.Entity.Number.Complex.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Number.Complex.ThisIsFinite.get -> bool
override AngouriMath.Entity.Number.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Number.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Number.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Number.Integer.Abs() -> AngouriMath.Entity.Number.Real!
override AngouriMath.Entity.Number.Integer.Latexise() -> string!
override AngouriMath.Entity.Number.Integer.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Number.Rational.Abs() -> AngouriMath.Entity.Number.Real!
override AngouriMath.Entity.Number.Rational.IsExact.get -> bool
override AngouriMath.Entity.Number.Rational.Latexise() -> string!
override AngouriMath.Entity.Number.Rational.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Number.Real.Abs() -> AngouriMath.Entity.Number.Real!
override AngouriMath.Entity.Number.Real.IsExact.get -> bool
override AngouriMath.Entity.Number.Real.Latexise() -> string!
override AngouriMath.Entity.Number.Real.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Number.Real.RealPart.get -> AngouriMath.Entity.Number.Real!
override AngouriMath.Entity.Number.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Powf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Powf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Powf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Powf.Latexise() -> string!
override AngouriMath.Entity.Powf.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Powf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Signumf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Signumf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Signumf.InnerSimplified -> AngouriMath.Entity!
override AngouriMath.Entity.Signumf.Latexise() -> string!
override AngouriMath.Entity.Sinf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Sinf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Sinf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Sinf.Latexise() -> string!
override AngouriMath.Entity.Sinf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Sumf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Sumf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Sumf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Sumf.Latexise() -> string!
override AngouriMath.Entity.Sumf.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Sumf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Tanf.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Tanf.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Tanf.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Tanf.Latexise() -> string!
override AngouriMath.Entity.Tanf.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.Tensor.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Tensor.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Tensor.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Tensor.Latexise() -> string!
override AngouriMath.Entity.Tensor.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Tensor.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.Entity.ToString() -> string!
override AngouriMath.Entity.Variable.Derive(AngouriMath.Entity.Variable! variable) -> AngouriMath.Entity!
override AngouriMath.Entity.Variable.InitDirectChildren() -> AngouriMath.Entity![]!
override AngouriMath.Entity.Variable.InnerEval() -> AngouriMath.Entity!
override AngouriMath.Entity.Variable.Latexise() -> string!
override AngouriMath.Entity.Variable.Priority.get -> AngouriMath.Core.Priority
override AngouriMath.Entity.Variable.Replace(System.Func<AngouriMath.Entity!, AngouriMath.Entity!>! func) -> AngouriMath.Entity!
override AngouriMath.MathS.Settings.Setting<T>.ToString() -> string!
override abstract AngouriMath.Core.SetNode.ToString() -> string!
override abstract AngouriMath.Core.SetPiece.Equals(object! obj) -> bool
override abstract AngouriMath.Core.SetPiece.GetHashCode() -> int
static AngouriMath.Core.Interval.operator !=(AngouriMath.Core.Interval! A, AngouriMath.Core.Interval! B) -> bool
static AngouriMath.Core.Interval.operator ==(AngouriMath.Core.Interval! A, AngouriMath.Core.Interval! B) -> bool
static AngouriMath.Core.OneElementPiece.operator !=(AngouriMath.Core.OneElementPiece! A, AngouriMath.Core.OneElementPiece! B) -> bool
static AngouriMath.Core.OneElementPiece.operator ==(AngouriMath.Core.OneElementPiece! A, AngouriMath.Core.OneElementPiece! B) -> bool
static AngouriMath.Core.SetNode.RepeatApply(System.Collections.Generic.IEnumerable<AngouriMath.Core.SetPiece!>? left, System.Collections.Generic.IEnumerable<AngouriMath.Core.SetPiece?>! right, System.Func<AngouriMath.Core.SetPiece!, AngouriMath.Core.SetPiece!, System.Collections.Generic.IEnumerable<AngouriMath.Core.SetPiece!>!>! func) -> System.Collections.Generic.IEnumerable<AngouriMath.Core.SetPiece!>?
static AngouriMath.Core.SetNode.operator !(AngouriMath.Core.SetNode! A) -> AngouriMath.Core.SetNode!
static AngouriMath.Core.SetNode.operator &(AngouriMath.Core.SetNode! A, AngouriMath.Core.SetNode! B) -> AngouriMath.Core.SetNode!
static AngouriMath.Core.SetNode.operator -(AngouriMath.Core.SetNode! A, AngouriMath.Core.SetNode! B) -> AngouriMath.Core.SetNode!
static AngouriMath.Core.SetNode.operator |(AngouriMath.Core.SetNode! A, AngouriMath.Core.SetNode! B) -> AngouriMath.Core.SetNode!
static AngouriMath.Core.SetPiece.explicit operator AngouriMath.Entity!(AngouriMath.Core.SetPiece! piece) -> AngouriMath.Entity!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!((AngouriMath.Entity! left, AngouriMath.Entity! right) tup) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!((AngouriMath.Entity! left, AngouriMath.Entity! right, bool leftClosed, bool rightClosed) tup) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!((AngouriMath.Entity! left, AngouriMath.Entity! right, bool leftReClosed, bool leftImClosed, bool rightReClosed, bool rightImClosed) tup) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!(AngouriMath.Entity! element) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!(AngouriMath.Entity.Number.Complex! element) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!(System.Numerics.Complex element) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!(double element) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!(float element) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.implicit operator AngouriMath.Core.SetPiece!(int element) -> AngouriMath.Core.SetPiece!
static AngouriMath.Core.SetPiece.operator !=(AngouriMath.Core.SetPiece! a, AngouriMath.Core.SetPiece! b) -> bool
static AngouriMath.Core.SetPiece.operator ==(AngouriMath.Core.SetPiece? a, AngouriMath.Core.SetPiece? b) -> bool
static AngouriMath.Entity.Number.Arccos(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Arccotan(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Arcsin(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Arctan(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.Create(AngouriMath.Entity.Number.Real! real, AngouriMath.Entity.Number.Real! imaginary) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.Create(PeterO.Numbers.EDecimal! real, PeterO.Numbers.EDecimal! imaginary) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.CreatePolar(PeterO.Numbers.EDecimal! magnitude, PeterO.Numbers.EDecimal! phase) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.Parse(string! source) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.TryParse(string! source, out AngouriMath.Entity.Number.Complex? dst) -> bool
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!((decimal re, decimal im) v) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!((double re, double im) v) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!((float re, float im) v) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!((int re, int im) v) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(PeterO.Numbers.EDecimal! value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(PeterO.Numbers.EInteger! value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(PeterO.Numbers.ERational! value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(System.Numerics.Complex value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(byte value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(decimal value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(double value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(float value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(int value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(long value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(sbyte value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(short value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(uint value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(ulong value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.implicit operator AngouriMath.Entity.Number.Complex!(ushort value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.operator *(AngouriMath.Entity.Number.Complex! a, AngouriMath.Entity.Number.Complex! b) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.operator +(AngouriMath.Entity.Number.Complex! a) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.operator +(AngouriMath.Entity.Number.Complex! a, AngouriMath.Entity.Number.Complex! b) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.operator -(AngouriMath.Entity.Number.Complex! a) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.operator -(AngouriMath.Entity.Number.Complex! a, AngouriMath.Entity.Number.Complex! b) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Complex.operator /(AngouriMath.Entity.Number.Complex! a, AngouriMath.Entity.Number.Complex! b) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Cos(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Cotan(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Exp(AngouriMath.Entity.Number.Complex! x) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Factorial(AngouriMath.Entity.Number.Complex! x) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Gamma(AngouriMath.Entity.Number.Complex! x) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.GetAllRoots(AngouriMath.Entity.Number.Complex! value, PeterO.Numbers.EInteger! rootPower) -> System.Collections.Generic.HashSet<AngouriMath.Entity.Number.Complex!>!
static AngouriMath.Entity.Number.GetAllRootsOf1(PeterO.Numbers.EInteger! rootPower) -> System.Collections.Generic.IEnumerable<AngouriMath.Entity!>!
static AngouriMath.Entity.Number.Integer.Create(PeterO.Numbers.EInteger! value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(PeterO.Numbers.EInteger! value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(byte value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(int value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(long value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(sbyte value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(short value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(uint value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(ulong value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.implicit operator AngouriMath.Entity.Number.Integer!(ushort value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.operator *(AngouriMath.Entity.Number.Integer! a, AngouriMath.Entity.Number.Integer! b) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.operator +(AngouriMath.Entity.Number.Integer! a) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.operator +(AngouriMath.Entity.Number.Integer! a, AngouriMath.Entity.Number.Integer! b) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.operator -(AngouriMath.Entity.Number.Integer! a) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.operator -(AngouriMath.Entity.Number.Integer! a, AngouriMath.Entity.Number.Integer! b) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Entity.Number.Integer.operator /(AngouriMath.Entity.Number.Integer! a, AngouriMath.Entity.Number.Integer! b) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Integer.operator <(AngouriMath.Entity.Number.Integer! a, AngouriMath.Entity.Number.Integer! b) -> bool
static AngouriMath.Entity.Number.Integer.operator <=(AngouriMath.Entity.Number.Integer! a, AngouriMath.Entity.Number.Integer! b) -> bool
static AngouriMath.Entity.Number.Integer.operator >(AngouriMath.Entity.Number.Integer! a, AngouriMath.Entity.Number.Integer! b) -> bool
static AngouriMath.Entity.Number.Integer.operator >=(AngouriMath.Entity.Number.Integer! a, AngouriMath.Entity.Number.Integer! b) -> bool
static AngouriMath.Entity.Number.IsZero(AngouriMath.Entity.Number.Complex! num) -> bool
static AngouriMath.Entity.Number.IsZero(AngouriMath.Entity.Number.Real! num) -> bool
static AngouriMath.Entity.Number.IsZero(PeterO.Numbers.EDecimal! num) -> bool
static AngouriMath.Entity.Number.Ln(AngouriMath.Entity.Number.Complex! x) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Log(AngouriMath.Entity.Number.Complex! base, AngouriMath.Entity.Number.Complex! x) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Pow(AngouriMath.Entity.Number.Complex! base, AngouriMath.Entity.Number.Complex! power) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Rational.Create(PeterO.Numbers.EInteger! numerator, PeterO.Numbers.EInteger! denominator) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.Create(PeterO.Numbers.ERational! value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.FindRational(PeterO.Numbers.EDecimal! num, int iterCount = -2147483648) -> AngouriMath.Entity.Number.Rational?
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(PeterO.Numbers.EInteger! value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(PeterO.Numbers.ERational! value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(byte value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(int value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(long value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(sbyte value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(short value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(uint value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(ulong value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.implicit operator AngouriMath.Entity.Number.Rational!(ushort value) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.operator *(AngouriMath.Entity.Number.Rational! a, AngouriMath.Entity.Number.Rational! b) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.operator +(AngouriMath.Entity.Number.Rational! a) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.operator +(AngouriMath.Entity.Number.Rational! a, AngouriMath.Entity.Number.Rational! b) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.operator -(AngouriMath.Entity.Number.Rational! a) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.operator -(AngouriMath.Entity.Number.Rational! a, AngouriMath.Entity.Number.Rational! b) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.Entity.Number.Rational.operator /(AngouriMath.Entity.Number.Rational! a, AngouriMath.Entity.Number.Rational! b) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Rational.operator <(AngouriMath.Entity.Number.Rational! a, AngouriMath.Entity.Number.Rational! b) -> bool
static AngouriMath.Entity.Number.Rational.operator <=(AngouriMath.Entity.Number.Rational! a, AngouriMath.Entity.Number.Rational! b) -> bool
static AngouriMath.Entity.Number.Rational.operator >(AngouriMath.Entity.Number.Rational! a, AngouriMath.Entity.Number.Rational! b) -> bool
static AngouriMath.Entity.Number.Rational.operator >=(AngouriMath.Entity.Number.Rational! a, AngouriMath.Entity.Number.Rational! b) -> bool
static AngouriMath.Entity.Number.Real.Create(PeterO.Numbers.EDecimal! value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(PeterO.Numbers.EDecimal! value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(PeterO.Numbers.EInteger! value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(PeterO.Numbers.ERational! value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(byte value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(decimal value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(double value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(float value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(int value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(long value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(sbyte value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(short value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(uint value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(ulong value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.implicit operator AngouriMath.Entity.Number.Real!(ushort value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.operator *(AngouriMath.Entity.Number.Real! a, AngouriMath.Entity.Number.Real! b) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.operator +(AngouriMath.Entity.Number.Real! a) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.operator +(AngouriMath.Entity.Number.Real! a, AngouriMath.Entity.Number.Real! b) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.operator -(AngouriMath.Entity.Number.Real! a) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.operator -(AngouriMath.Entity.Number.Real! a, AngouriMath.Entity.Number.Real! b) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.operator /(AngouriMath.Entity.Number.Real! a, AngouriMath.Entity.Number.Real! b) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Entity.Number.Real.operator <(AngouriMath.Entity.Number.Real! a, AngouriMath.Entity.Number.Real! b) -> bool
static AngouriMath.Entity.Number.Real.operator <=(AngouriMath.Entity.Number.Real! a, AngouriMath.Entity.Number.Real! b) -> bool
static AngouriMath.Entity.Number.Real.operator >(AngouriMath.Entity.Number.Real! a, AngouriMath.Entity.Number.Real! b) -> bool
static AngouriMath.Entity.Number.Real.operator >=(AngouriMath.Entity.Number.Real! a, AngouriMath.Entity.Number.Real! b) -> bool
static AngouriMath.Entity.Number.Signum(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Sin(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.Sqrt(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.SuperSwitch<T>(AngouriMath.Entity.Number! num1, AngouriMath.Entity.Number! num2, System.Func<AngouriMath.Entity.Number.Integer!, AngouriMath.Entity.Number.Integer!, T>! ifInt, System.Func<AngouriMath.Entity.Number.Rational!, AngouriMath.Entity.Number.Rational!, T>! ifRat, System.Func<AngouriMath.Entity.Number.Real!, AngouriMath.Entity.Number.Real!, T>! ifReal, System.Func<AngouriMath.Entity.Number.Complex!, AngouriMath.Entity.Number.Complex!, T>! ifCom) -> T
static AngouriMath.Entity.Number.SuperSwitch<T>(T! num1, T! num2, System.Func<AngouriMath.Entity.Number.Integer!, AngouriMath.Entity.Number.Integer!, AngouriMath.Entity.Number.Integer!>! ifInt, System.Func<AngouriMath.Entity.Number.Rational!, AngouriMath.Entity.Number.Rational!, AngouriMath.Entity.Number.Rational!>! ifRat, System.Func<AngouriMath.Entity.Number.Real!, AngouriMath.Entity.Number.Real!, AngouriMath.Entity.Number.Real!>! ifReal, System.Func<AngouriMath.Entity.Number.Complex!, AngouriMath.Entity.Number.Complex!, AngouriMath.Entity.Number.Complex!>! ifCom) -> T!
static AngouriMath.Entity.Number.Tan(AngouriMath.Entity.Number.Complex! num) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(PeterO.Numbers.EDecimal! value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(PeterO.Numbers.EInteger! value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(PeterO.Numbers.ERational! value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(System.Numerics.Complex value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(byte value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(decimal value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(double value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(float value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(int value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(long value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(sbyte value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(short value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(uint value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(ulong value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.implicit operator AngouriMath.Entity.Number!(ushort value) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.operator *(AngouriMath.Entity.Number! a, AngouriMath.Entity.Number! b) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.operator +(AngouriMath.Entity.Number! a) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.operator +(AngouriMath.Entity.Number! a, AngouriMath.Entity.Number! b) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.operator -(AngouriMath.Entity.Number! a) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.operator -(AngouriMath.Entity.Number! a, AngouriMath.Entity.Number! b) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Number.operator /(AngouriMath.Entity.Number! a, AngouriMath.Entity.Number! b) -> AngouriMath.Entity.Number!
static AngouriMath.Entity.Variable.implicit operator AngouriMath.Entity.Variable!(string! name) -> AngouriMath.Entity.Variable!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(PeterO.Numbers.EDecimal! value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(PeterO.Numbers.EInteger! value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(PeterO.Numbers.ERational! value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(System.Numerics.Complex value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(byte value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(decimal value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(double value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(float value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(int value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(long value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(sbyte value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(short value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(string! expr) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(uint value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(ulong value) -> AngouriMath.Entity!
static AngouriMath.Entity.implicit operator AngouriMath.Entity!(ushort value) -> AngouriMath.Entity!
static AngouriMath.Entity.operator *(AngouriMath.Entity! a, AngouriMath.Entity! b) -> AngouriMath.Entity!
static AngouriMath.Entity.operator +(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.Entity.operator +(AngouriMath.Entity! a, AngouriMath.Entity! b) -> AngouriMath.Entity!
static AngouriMath.Entity.operator -(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.Entity.operator -(AngouriMath.Entity! a, AngouriMath.Entity! b) -> AngouriMath.Entity!
static AngouriMath.Entity.operator /(AngouriMath.Entity! a, AngouriMath.Entity! b) -> AngouriMath.Entity!
static AngouriMath.Extensions.AngouriMathExtensions.Compile(this string! str, params AngouriMath.Entity.Variable![]! variables) -> AngouriMath.Core.FastExpression!
static AngouriMath.Extensions.AngouriMathExtensions.Derive(this string! str, AngouriMath.Entity.Variable! x) -> AngouriMath.Entity!
static AngouriMath.Extensions.AngouriMathExtensions.Eval(this string! expr) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Extensions.AngouriMathExtensions.Expand(this string! expr) -> AngouriMath.Entity!
static AngouriMath.Extensions.AngouriMathExtensions.Factorize(this string! expr) -> AngouriMath.Entity!
static AngouriMath.Extensions.AngouriMathExtensions.Latexise(this string! str) -> string!
static AngouriMath.Extensions.AngouriMathExtensions.Simplify(this string! expr) -> AngouriMath.Entity!
static AngouriMath.Extensions.AngouriMathExtensions.SolveEquation(this string! expr, AngouriMath.Entity.Variable! x) -> AngouriMath.Core.Set!
static AngouriMath.Extensions.AngouriMathExtensions.SolveSystem(this (string! eq1, string! eq2) eqs, string! var1, string! var2) -> AngouriMath.Entity.Tensor?
static AngouriMath.Extensions.AngouriMathExtensions.SolveSystem(this (string! eq1, string! eq2, string! eq3) eqs, string! var1, string! var2, string! var3) -> AngouriMath.Entity.Tensor?
static AngouriMath.Extensions.AngouriMathExtensions.SolveSystem(this (string! eq1, string! eq2, string! eq3, string! eq4) eqs, string! var1, string! var2, string! var3, string! var4) -> AngouriMath.Entity.Tensor?
static AngouriMath.Extensions.AngouriMathExtensions.SolveSystem(this (string! eq1, string! eq2, string! eq3, string! eq4, string! eq5) eqs, string! var1, string! var2, string! var3, string! var4, string! var5) -> AngouriMath.Entity.Tensor?
static AngouriMath.Extensions.AngouriMathExtensions.SolveSystem(this (string! eq1, string! eq2, string! eq3, string! eq4, string! eq5, string! eq6) eqs, string! var1, string! var2, string! var3, string! var4, string! var5, string! var6) -> AngouriMath.Entity.Tensor?
static AngouriMath.Extensions.AngouriMathExtensions.SolveSystem(this (string! eq1, string! eq2, string! eq3, string! eq4, string! eq5, string! eq6, string! eq7) eqs, string! var1, string! var2, string! var3, string! var4, string! var5, string! var6, string! var7) -> AngouriMath.Entity.Tensor?
static AngouriMath.Extensions.AngouriMathExtensions.SolveSystem(this (string! eq1, string! eq2, string! eq3, string! eq4, string! eq5, string! eq6, string! eq7, string! eq8) eqs, string! var1, string! var2, string! var3, string! var4, string! var5, string! var6, string! var7, string! var8) -> AngouriMath.Entity.Tensor?
static AngouriMath.Extensions.AngouriMathExtensions.SolveSystem(this (string! eq1, string! eq2, string! eq3, string! eq4, string! eq5, string! eq6, string! eq7, string! eq8, string! eq9) eqs, string! var1, string! var2, string! var3, string! var4, string! var5, string! var6, string! var7, string! var8, string! var9) -> AngouriMath.Entity.Tensor?
static AngouriMath.Extensions.AngouriMathExtensions.Substitute(this string! expr, AngouriMath.Entity.Variable! var, AngouriMath.Entity! value) -> AngouriMath.Entity!
static AngouriMath.Extensions.AngouriMathExtensions.ToEntity(this string! expr) -> AngouriMath.Entity!
static AngouriMath.Extensions.AngouriMathExtensions.ToNumber(this PeterO.Numbers.EDecimal! value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Extensions.AngouriMathExtensions.ToNumber(this PeterO.Numbers.EInteger! value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Extensions.AngouriMathExtensions.ToNumber(this System.Numerics.Complex complex) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.Extensions.AngouriMathExtensions.ToNumber(this decimal value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Extensions.AngouriMathExtensions.ToNumber(this double value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Extensions.AngouriMathExtensions.ToNumber(this float value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.Extensions.AngouriMathExtensions.ToNumber(this int value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.Extensions.AngouriMathExtensions.ToNumber(this long value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.MathS.Arccos(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Arccosec(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Arccotan(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Arcsec(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Arcsin(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Arctan(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Cbrt(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Compute.Derivative(AngouriMath.Entity! expr, AngouriMath.Entity.Variable! x) -> AngouriMath.Entity?
static AngouriMath.MathS.Compute.Derivative(AngouriMath.Entity! expr, AngouriMath.Entity.Variable! x, PeterO.Numbers.EInteger! power) -> AngouriMath.Entity?
static AngouriMath.MathS.Compute.Integral(AngouriMath.Entity! expr, AngouriMath.Entity.Variable! x) -> AngouriMath.Entity?
static AngouriMath.MathS.Compute.Integral(AngouriMath.Entity! expr, AngouriMath.Entity.Variable! x, PeterO.Numbers.EInteger! power) -> AngouriMath.Entity?
static AngouriMath.MathS.Compute.Limit(AngouriMath.Entity! expr, AngouriMath.Entity.Variable! var, AngouriMath.Entity! approachDestination) -> AngouriMath.Entity?
static AngouriMath.MathS.Compute.Limit(AngouriMath.Entity! expr, AngouriMath.Entity.Variable! var, AngouriMath.Entity! approachDestination, AngouriMath.Core.ApproachFrom direction) -> AngouriMath.Entity?
static AngouriMath.MathS.Cos(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Cosec(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Cotan(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.DecimalConst.e.get -> PeterO.Numbers.EDecimal!
static AngouriMath.MathS.DecimalConst.pi.get -> PeterO.Numbers.EDecimal!
static AngouriMath.MathS.Derivative(AngouriMath.Entity! expr, AngouriMath.Entity! var) -> AngouriMath.Entity!
static AngouriMath.MathS.Derivative(AngouriMath.Entity! expr, AngouriMath.Entity! var, AngouriMath.Entity! power) -> AngouriMath.Entity!
static AngouriMath.MathS.Equations(System.Collections.Generic.IEnumerable<AngouriMath.Entity!>! equations) -> AngouriMath.Core.EquationSystem!
static AngouriMath.MathS.Equations(params AngouriMath.Entity![]! equations) -> AngouriMath.Core.EquationSystem!
static AngouriMath.MathS.Factorial(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.FromBaseN(string! num, int N) -> AngouriMath.Entity.Number.Real!
static AngouriMath.MathS.FromString(string! expr) -> AngouriMath.Entity!
static AngouriMath.MathS.Gamma(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Integral(AngouriMath.Entity! expr, AngouriMath.Entity! var) -> AngouriMath.Entity!
static AngouriMath.MathS.Integral(AngouriMath.Entity! expr, AngouriMath.Entity! var, AngouriMath.Entity! power) -> AngouriMath.Entity!
static AngouriMath.MathS.Latex(AngouriMath.Core.ILatexiseable! latexiseable) -> string!
static AngouriMath.MathS.Limit(AngouriMath.Entity! expr, AngouriMath.Entity! var, AngouriMath.Entity! dest, AngouriMath.Core.ApproachFrom approach = AngouriMath.Core.ApproachFrom.BothSides) -> AngouriMath.Entity!
static AngouriMath.MathS.Ln(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Log(AngouriMath.Entity! base, AngouriMath.Entity! x) -> AngouriMath.Entity!
static AngouriMath.MathS.Log(AngouriMath.Entity! x) -> AngouriMath.Entity!
static AngouriMath.MathS.Matrices.DotProduct(AngouriMath.Entity.Tensor! A, AngouriMath.Entity.Tensor! B) -> AngouriMath.Entity.Tensor!
static AngouriMath.MathS.Matrices.Matrix(AngouriMath.Entity![,]! values) -> AngouriMath.Entity.Tensor!
static AngouriMath.MathS.Matrices.Matrix(int rows, int columns, params AngouriMath.Entity![]! values) -> AngouriMath.Entity.Tensor!
static AngouriMath.MathS.Matrices.MatrixMultiplication(AngouriMath.Entity.Tensor! A, AngouriMath.Entity.Tensor! B) -> AngouriMath.Entity.Tensor!
static AngouriMath.MathS.Matrices.ScalarProduct(AngouriMath.Entity.Tensor! a, AngouriMath.Entity.Tensor! b) -> AngouriMath.Entity!
static AngouriMath.MathS.Matrices.Vector(params AngouriMath.Entity![]! values) -> AngouriMath.Entity.Tensor!
static AngouriMath.MathS.Numbers.Create(PeterO.Numbers.EDecimal! re, PeterO.Numbers.EDecimal! im) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.MathS.Numbers.Create(PeterO.Numbers.EDecimal! value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.MathS.Numbers.Create(PeterO.Numbers.EInteger! value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.MathS.Numbers.Create(PeterO.Numbers.ERational! rational) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.MathS.Numbers.Create(System.Numerics.Complex value) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.MathS.Numbers.Create(double value) -> AngouriMath.Entity.Number.Real!
static AngouriMath.MathS.Numbers.Create(int value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.MathS.Numbers.Create(long value) -> AngouriMath.Entity.Number.Integer!
static AngouriMath.MathS.Numbers.CreateRational(PeterO.Numbers.EInteger! numerator, PeterO.Numbers.EInteger! denominator) -> AngouriMath.Entity.Number.Rational!
static AngouriMath.MathS.Pow(AngouriMath.Entity! base, AngouriMath.Entity! power) -> AngouriMath.Entity!
static AngouriMath.MathS.Sec(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Sets.C() -> AngouriMath.Core.Set!
static AngouriMath.MathS.Sets.Element(AngouriMath.Entity! element) -> AngouriMath.Core.OneElementPiece!
static AngouriMath.MathS.Sets.Empty() -> AngouriMath.Core.Set!
static AngouriMath.MathS.Sets.Finite(params AngouriMath.Entity![]! entities) -> AngouriMath.Core.Set!
static AngouriMath.MathS.Sets.Interval(AngouriMath.Entity! from, AngouriMath.Entity! to) -> AngouriMath.Core.Interval!
static AngouriMath.MathS.Sets.R() -> AngouriMath.Core.Set!
static AngouriMath.MathS.Settings.AllowNewton.get -> AngouriMath.MathS.Settings.Setting<bool>!
static AngouriMath.MathS.Settings.ComplexityCriteria.get -> AngouriMath.MathS.Settings.Setting<System.Func<AngouriMath.Entity!, int>!>!
static AngouriMath.MathS.Settings.DecimalPrecisionContext.get -> AngouriMath.MathS.Settings.Setting<PeterO.Numbers.EContext!>!
static AngouriMath.MathS.Settings.DowncastingEnabled.get -> AngouriMath.MathS.Settings.Setting<bool>!
static AngouriMath.MathS.Settings.FloatToRationalIterCount.get -> AngouriMath.MathS.Settings.Setting<int>!
static AngouriMath.MathS.Settings.MaxAbsNumeratorOrDenominatorValue.get -> AngouriMath.MathS.Settings.Setting<PeterO.Numbers.EInteger!>!
static AngouriMath.MathS.Settings.MaxExpansionTermCount.get -> AngouriMath.MathS.Settings.Setting<int>!
static AngouriMath.MathS.Settings.NewtonSolver.get -> AngouriMath.MathS.Settings.Setting<AngouriMath.MathS.Settings.NewtonSetting!>!
static AngouriMath.MathS.Settings.PrecisionErrorCommon.get -> AngouriMath.MathS.Settings.Setting<PeterO.Numbers.EDecimal!>!
static AngouriMath.MathS.Settings.PrecisionErrorZeroRange.get -> AngouriMath.MathS.Settings.Setting<PeterO.Numbers.EDecimal!>!
static AngouriMath.MathS.Settings.Setting<T>.implicit operator AngouriMath.MathS.Settings.Setting<T>!(T a) -> AngouriMath.MathS.Settings.Setting<T>!
static AngouriMath.MathS.Settings.Setting<T>.implicit operator T(AngouriMath.MathS.Settings.Setting<T>! s) -> T
static AngouriMath.MathS.Signum(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Sin(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.SolveEquation(AngouriMath.Entity! equation, AngouriMath.Entity.Variable! var) -> AngouriMath.Core.Set!
static AngouriMath.MathS.SolveInequalityNumerically(AngouriMath.Entity! inequality, AngouriMath.Entity.Variable! var, AngouriMath.MathS.Inequality sign) -> AngouriMath.Core.Set!
static AngouriMath.MathS.Sqr(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Sqrt(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.Tan(AngouriMath.Entity! a) -> AngouriMath.Entity!
static AngouriMath.MathS.ToBaseN(AngouriMath.Entity.Number.Real! num, int N) -> string!
static AngouriMath.MathS.ToSympyCode(AngouriMath.Entity! expr) -> string!
static AngouriMath.MathS.TryPolynomial(AngouriMath.Entity! expr, AngouriMath.Entity.Variable! variable, out AngouriMath.Entity? dst) -> bool
static AngouriMath.MathS.Var(string! name) -> AngouriMath.Entity.Variable!
static AngouriMath.SySyn.Diff(AngouriMath.Entity! expr, params AngouriMath.Entity.Variable![]! vars) -> AngouriMath.Entity!
static AngouriMath.SySyn.Evalf(AngouriMath.Entity! expr) -> AngouriMath.Entity.Number.Complex!
static AngouriMath.SySyn.Exp(AngouriMath.Entity! power) -> AngouriMath.Entity!
static AngouriMath.SySyn.Expand(AngouriMath.Entity! expr) -> AngouriMath.Entity!
static AngouriMath.SySyn.Factor(AngouriMath.Entity! expr) -> AngouriMath.Entity!
static AngouriMath.SySyn.Latex(AngouriMath.Entity! expr) -> AngouriMath.Entity!
static AngouriMath.SySyn.Rational(AngouriMath.Entity.Number.Complex! a, AngouriMath.Entity.Number.Complex! b) -> AngouriMath.Entity!
static AngouriMath.SySyn.Simplify(AngouriMath.Entity! expr) -> AngouriMath.Entity!
static AngouriMath.SySyn.Solve(AngouriMath.Entity! expr, AngouriMath.Entity.Variable! x) -> AngouriMath.Core.Set!
static AngouriMath.SySyn.Symbol(string! name) -> AngouriMath.Entity.Variable!
static AngouriMath.SySyn.Symbol(string! name1, string! name2) -> (AngouriMath.Entity.Variable!, AngouriMath.Entity.Variable!)
static AngouriMath.SySyn.Symbol(string! name1, string! name2, string! name3) -> (AngouriMath.Entity.Variable!, AngouriMath.Entity.Variable!, AngouriMath.Entity.Variable!)
static AngouriMath.SySyn.Symbol(string! name1, string! name2, string! name3, string! name4) -> (AngouriMath.Entity.Variable!, AngouriMath.Entity.Variable!, AngouriMath.Entity.Variable!, AngouriMath.Entity.Variable!)
static readonly AngouriMath.Entity.Number.Complex.ImaginaryOne -> AngouriMath.Entity.Number.Complex!
static readonly AngouriMath.Entity.Number.Complex.MinusImaginaryOne -> AngouriMath.Entity.Number.Complex!
static readonly AngouriMath.Entity.Number.Complex.NegNegInfinity -> AngouriMath.Entity.Number.Complex!
static readonly AngouriMath.Entity.Number.Complex.NegPosInfinity -> AngouriMath.Entity.Number.Complex!
static readonly AngouriMath.Entity.Number.Complex.PosNegInfinity -> AngouriMath.Entity.Number.Complex!
static readonly AngouriMath.Entity.Number.Complex.PosPosInfinity -> AngouriMath.Entity.Number.Complex!
static readonly AngouriMath.Entity.Number.Integer.MinusOne -> AngouriMath.Entity.Number.Integer!
static readonly AngouriMath.Entity.Number.Integer.One -> AngouriMath.Entity.Number.Integer!
static readonly AngouriMath.Entity.Number.Integer.Zero -> AngouriMath.Entity.Number.Integer!
static readonly AngouriMath.Entity.Number.Real.NaN -> AngouriMath.Entity.Number.Real!
static readonly AngouriMath.Entity.Number.Real.NegativeInfinity -> AngouriMath.Entity.Number.Real!
static readonly AngouriMath.Entity.Number.Real.PositiveInfinity -> AngouriMath.Entity.Number.Real!
static readonly AngouriMath.MathS.e -> AngouriMath.Entity.Variable!
static readonly AngouriMath.MathS.i -> AngouriMath.Entity.Number.Complex!
static readonly AngouriMath.MathS.pi -> AngouriMath.Entity.Variable!
virtual AngouriMath.Entity.Number.Complex.Abs() -> AngouriMath.Entity.Number.Real!
virtual AngouriMath.Entity.Number.Complex.RealPart.get -> AngouriMath.Entity.Number.Real!
virtual AngouriMath.Entity.ThisIsFinite.get -> bool